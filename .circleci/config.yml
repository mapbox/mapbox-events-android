version: 2

workflows:
  version: 2
  default:
    jobs:
      - build
      - release:
          filters:
            tags:
              only: /(telem|core)-.*/

jobs:
  build:
    working_directory: ~/code
    docker:
      - image: mbgl/android-ndk-r19:8e91a7ebab
    environment:
      JVM_OPTS: -Xmx3200m
      BUILDTYPE: Debug
      IS_LOCAL_DEVELOPMENT: false
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "gradle/dependencies.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "gradle/dependencies.gradle" }}
      - run:
          name: Check code style
          command: make checkstyle
      - run:
          name: Run Lint
          command: ./gradlew lint
      - run:
          name: Run unit-test in Android libraries
          command: make test
      - run:
          name: Build testapp APK
          command: |
            ./gradlew accessToken
            ./gradlew app:assembleDebug
      - run:
          name: Build release to test ProGuard rules
          command: ./gradlew app:assembleRelease
      - run:
          name: Build all the test APK
          command: ./gradlew assembleAndroidTest
      - run:
          name: Log in to Google Cloud Platform
          shell: /bin/bash -euo pipefail
          command: |
            echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
            gcloud auth activate-service-account --key-file secret.json --project mapbox-events-android
            rm secret.json
      - run:
          name: Run libcore instrumentation tests on Firebase
          no_output_timeout: 20m
          command: |
            build_dir="libcore/build"
            test_apk_path="outputs/apk/androidTest/debug/libcore-debug-androidTest.apk"
            ./cloud_test.sh $build_dir $test_apk_path $CIRCLE_BUILD_NUM
      - run:
          name: Run libtelemetry instrumentation tests on Firebase
          no_output_timeout: 20m
          command: |
            build_dir="libtelemetry/build"
            test_apk_path="outputs/apk/androidTest/full/debug/libtelemetry-full-debug-androidTest.apk"
            ./cloud_test.sh $build_dir $test_apk_path $CIRCLE_BUILD_NUM
      - run:
          name: Post code coverage report to Codecov.io
          command: |
            make test-coverage
            pip install --user codecov && /root/.local/bin/codecov
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results


# ------------------------------------------------------------------------------
  release:
    docker:
      - image: mbgl/android-ndk-r19:8e91a7ebab
    working_directory: ~/code
    environment:
      BUILDTYPE: Release
      IS_LOCAL_DEVELOPMENT: false
    steps:
      - checkout
      - run:
          name: Generate Maven credentials
          shell: /bin/bash -euo pipefail
          command: |
            aws s3 cp s3://mapbox/android/signing-credentials/secring.gpg secring.gpg
            echo "NEXUS_USERNAME=$PUBLISH_NEXUS_USERNAME
            NEXUS_PASSWORD=$PUBLISH_NEXUS_PASSWORD
            signing.keyId=$SIGNING_KEYID
            signing.password=$SIGNING_PASSWORD
            signing.secretKeyRingFile=../secring.gpg" >> gradle.properties
      - run:
          name: Update version name
          command: |
            if [[ $CIRCLE_TAG == telem-* ]]; then
              sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${CIRCLE_TAG:6}/" libtelemetry/gradle.properties
            fi
            if [[ $CIRCLE_TAG == core-* ]]; then
              sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${CIRCLE_TAG:5}/" libcore/gradle.properties
            fi
      - run:
          name: Build libraries
          command: make release
      - deploy:
          name: Publish to Maven Central
          command: |
            if [[ $CIRCLE_BRANCH == master ]]; then
              if [[ $CIRCLE_TAG == telem-* ]]; then
                  make publish-telem ;
              elif [[ $CIRCLE_TAG == core-* ]]; then
                make publish-core ;
              else
                make publish-telem ;
                make publish-core ;
              fi
            fi
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Setup Environment
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Check & Publish Binary Size
          command: |
            binary_path="libtelemetry/build/outputs/aar/libtelemetry-full-release.aar"
            if [[ $CIRCLE_BRANCH == master ]] || [[ $CIRCLE_BRANCH == release-* ]]; then
              ./scripts/capture_binary_size_for_aws.sh $binary_path "mapbox-events-android"
            else
              ./scripts/check_binary_size.sh $binary_path "Telemetry-AAR"
            fi
